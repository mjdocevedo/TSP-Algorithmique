// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// copyToFinal
void copyToFinal(IntegerVector curr_path);
RcppExport SEXP _ProjetAlgoTSP_copyToFinal(SEXP curr_pathSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type curr_path(curr_pathSEXP);
    copyToFinal(curr_path);
    return R_NilValue;
END_RCPP
}
// secondMin
int secondMin(IntegerMatrix adj, int i);
RcppExport SEXP _ProjetAlgoTSP_secondMin(SEXP adjSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type adj(adjSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(secondMin(adj, i));
    return rcpp_result_gen;
END_RCPP
}
// TSPRec
void TSPRec(IntegerMatrix adj, int curr_bound, int curr_weight, int level, IntegerVector curr_path, LogicalVector visited);
RcppExport SEXP _ProjetAlgoTSP_TSPRec(SEXP adjSEXP, SEXP curr_boundSEXP, SEXP curr_weightSEXP, SEXP levelSEXP, SEXP curr_pathSEXP, SEXP visitedSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type adj(adjSEXP);
    Rcpp::traits::input_parameter< int >::type curr_bound(curr_boundSEXP);
    Rcpp::traits::input_parameter< int >::type curr_weight(curr_weightSEXP);
    Rcpp::traits::input_parameter< int >::type level(levelSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type curr_path(curr_pathSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type visited(visitedSEXP);
    TSPRec(adj, curr_bound, curr_weight, level, curr_path, visited);
    return R_NilValue;
END_RCPP
}
// TSP
void TSP(IntegerMatrix adj);
RcppExport SEXP _ProjetAlgoTSP_TSP(SEXP adjSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type adj(adjSEXP);
    TSP(adj);
    return R_NilValue;
END_RCPP
}
// rcpp_sum
double rcpp_sum(NumericVector v);
RcppExport SEXP _ProjetAlgoTSP_rcpp_sum(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_sum(v));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ProjetAlgoTSP_copyToFinal", (DL_FUNC) &_ProjetAlgoTSP_copyToFinal, 1},
    {"_ProjetAlgoTSP_secondMin", (DL_FUNC) &_ProjetAlgoTSP_secondMin, 2},
    {"_ProjetAlgoTSP_TSPRec", (DL_FUNC) &_ProjetAlgoTSP_TSPRec, 6},
    {"_ProjetAlgoTSP_TSP", (DL_FUNC) &_ProjetAlgoTSP_TSP, 1},
    {"_ProjetAlgoTSP_rcpp_sum", (DL_FUNC) &_ProjetAlgoTSP_rcpp_sum, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_ProjetAlgoTSP(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
